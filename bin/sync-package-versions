#!/usr/bin/env node

/* eslint-disable no-restricted-syntax, guard-for-in */

// Script taken from https://github.com/changesets/changesets/issues/432#issuecomment-925364740
// This can be removed once changesets has proper support for yarn workspaces
// This script has been modified to work with classic yarn

const {readFileSync, writeFileSync} = require('fs');
const {execSync} = require('child_process');

const wsOutput = JSON.parse(
  execSync('yarn -s workspaces info --json', {
    encoding: 'utf-8',
  })
);

// We will only try to update dependencies in these package file types
const DEP_TYPES_TO_UPDATE = ['dependencies', 'devDependencies', 'peerDependencies'];

// Used to look up the current package.json version at a location
const getPackageFile = location => JSON.parse(readFileSync(`${location}/package.json`));

// Object map of entries to make version replacement easier when we publish
const workspaceVersionMap = Object.fromEntries(
  Object.entries(wsOutput).map(([packageName, {location}]) => [
    packageName,
    {location, version: getPackageFile(location).version},
  ])
);

for (const pkg in workspaceVersionMap) {
  const {location} = workspaceVersionMap[pkg];

  // Get the packagefile data that we will use to rewrite the version updates.
  // NOTE: This data will be mutated in JS before we output to overwrite the file
  const packageFile = getPackageFile(location);

  // Used to target a package.json dependency list type and if the dependency matches one of our workspace packages,
  // we update the version to match the current workspace version in our workspace version map.
  const mutuateDeps = depType => {
    // Get the dependency type from the file and iterate over each dependency
    for (const dep in packageFile[depType]) {
      // if a dependency matches one of the dependencies in our workspace map
      if (Object.keys(workspaceVersionMap).includes(dep)) {
        // we mutate the package file data in memory to match the current workspace version
        packageFile[depType][dep] = `^${workspaceVersionMap[dep].version}`;
      }
    }
  };

  // Go mutate the allowed dependency types
  DEP_TYPES_TO_UPDATE.map(dependencyType => mutuateDeps(dependencyType));

  // Write our updated files
  writeFileSync(
    `${location}/package.json`,
    // Convert the file data to json
    // include the 2 space indent formatting
    // and also add an empty newline at the end
    `${JSON.stringify(packageFile, null, 2)}\n`
  );
}
